// Generated by CoffeeScript 1.6.2
(function() {
  var RedisInst, RedisSessions, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require("underscore");

  RedisInst = require("redis");

  RedisSessions = (function() {
    function RedisSessions(redisport, redishost, redisns) {
      if (redisport == null) {
        redisport = 6379;
      }
      if (redishost == null) {
        redishost = "127.0.0.1";
      }
      this.redisns = redisns != null ? redisns : "rs:";
      this.create = __bind(this.create, this);
      this.redis = RedisInst.createClient(redisport, redishost);
    }

    RedisSessions.prototype.activity = function(options, cb) {
      if (this._validate(options, ["app", "dt"], cb) === false) {
        return;
      }
      this.redis.zcount("" + this.redisns + options.app + ":_sessions", this._now() - options.dt, "+inf", function(err, resp) {
        if (err) {
          cb(err);
          return;
        }
        cb(null, {
          activity: resp
        });
      });
    };

    RedisSessions.prototype.create = function(options, cb) {
      var mc, token;

      options = this._validate(options, ["app", "id", "ip", "ttl"], cb);
      if (options === false) {
        return;
      }
      token = this._createToken();
      mc = this._createMultiStatement(options.app, token, options.id, options.ttl);
      mc.push(["hmset", "" + this.redisns + options.app + ":" + token, "id", options.id, "r", 1, "w", 1, "ip", options.ip, "la", this._now(), "ttl", parseInt(options.ttl)]);
      this.redis.multi(mc).exec(function(err, resp) {
        if (err) {
          cb(err);
          return;
        }
        if (resp[2] !== "OK") {
          cb("Unknow error");
          return;
        }
        cb(null, {
          token: token
        });
      });
    };

    RedisSessions.prototype.get = function(options, cb) {
      var now, thekey,
        _this = this;

      options = this._validate(options, ["app", "token"], cb);
      if (options === false) {
        return;
      }
      now = this._now();
      thekey = "" + this.redisns + options.app + ":" + options.token;
      this.redis.hmget(thekey, "id", "r", "w", "ttl", "d", "la", "ip", function(err, resp) {
        var mc, o;

        if (err) {
          cb(err);
          return;
        }
        o = _this._prepareSession(resp);
        if (o === null) {
          cb(null, {});
          return;
        }
        if (options._noupdate) {
          cb(null, o);
          return;
        }
        mc = _this._createMultiStatement(options.app, options.token, o.id, o.ttl);
        mc.push(["hincrby", thekey, "r", 1]);
        if (o.idle > 1) {
          mc.push(["hset", thekey, "la", now]);
        }
        _this.redis.multi(mc).exec(function(err, resp) {
          if (err) {
            cb(err);
            return;
          }
          cb(null, o);
        });
      });
    };

    RedisSessions.prototype.kill = function(options, cb) {
      var _this = this;

      options._noupdate = true;
      this.get(options, function(err, resp) {
        var mc;

        if (err) {
          cb(err);
          return;
        }
        if (!resp.id) {
          cb(null, {
            kill: 0
          });
          return;
        }
        mc = [["zrem", "" + _this.redisns + options.app + ":_sessions", "" + options.token + ":" + resp.id], ["zrem", "" + _this.redisns + "SESSIONS", "" + options.app + ":" + options.token + ":" + resp.id], ["del", "" + _this.redisns + options.app + ":" + options.token]];
        _this.redis.multi(mc).exec(function(err, resp) {
          if (err) {
            cb(err);
            return;
          }
          if (resp[0] === 1 && resp[1] === 1 && resp[2] === 1) {
            cb(null, {
              kill: 1
            });
          } else {
            cb(null, {
              kill: 0
            });
          }
        });
      });
    };

    RedisSessions.prototype.killall = function(options, cb) {
      var appkey,
        _this = this;

      options = this._validate(options, ["app"], cb);
      if (options === false) {
        return;
      }
      appkey = "" + this.redisns + options.app + ":_sessions";
      return this.redis.zrange(appkey, 0, -1, function(err, resp) {
        var e, globalkeys, mc, tokenkeys, _i, _len;

        if (err) {
          cb(err);
          return;
        }
        if (!resp.length) {
          cb(null, 0);
          return;
        }
        globalkeys = [];
        tokenkeys = [];
        for (_i = 0, _len = resp.length; _i < _len; _i++) {
          e = resp[_i];
          globalkeys.push("" + options.app + ":" + e);
          tokenkeys.push("" + _this.redisns + options.app + ":" + (e.split(':')[0]));
        }
        mc = [["zrem", appkey].concat(resp), ["zrem", "" + _this.redisns + "SESSIONS"].concat(globalkeys), ["del"].concat(tokenkeys)];
        _this.redis.multi(mc).exec(function(err, resp) {
          cb(null, {
            kill: resp[0]
          });
        });
      });
    };

    RedisSessions.prototype.soid = function(options, cb) {
      var _this = this;

      options = this._validate(options, ["app", "id"], cb);
      if (options === false) {
        return;
      }
      this.redis.zrevrange("" + this.redisns + options.app + ":_sessions", 0, -1, function(err, resp) {
        var e, mc, toget, _i, _len;

        if (err) {
          cb(err);
          return;
        }
        if (!resp.length) {
          cb(null, {
            sessions: []
          });
          return;
        }
        toget = [];
        for (_i = 0, _len = resp.length; _i < _len; _i++) {
          e = resp[_i];
          if (e.split(':')[1] === options.id) {
            toget.push(e.split(':')[0]);
          }
        }
        if (!toget.length) {
          cb(null, {
            sessions: []
          });
        }
        mc = (function() {
          var _j, _len1, _results;

          _results = [];
          for (_j = 0, _len1 = toget.length; _j < _len1; _j++) {
            e = toget[_j];
            _results.push(["hmget", "" + this.redisns + options.app + ":" + e, "id", "r", "w", "ttl", "d", "la", "ip"]);
          }
          return _results;
        }).call(_this);
        _this.redis.multi(mc).exec(function(err, resp) {
          var o;

          if (err) {
            cb(err);
            return;
          }
          o = (function() {
            var _j, _len1, _results;

            _results = [];
            for (_j = 0, _len1 = resp.length; _j < _len1; _j++) {
              e = resp[_j];
              _results.push(this._prepareSession(e));
            }
            return _results;
          }).call(_this);
          cb(null, {
            sessions: o
          });
        });
      });
    };

    RedisSessions.prototype.set = function(options, cb) {
      var _this = this;

      options = this._validate(options, ["app", "token", "d"], cb);
      if (options === false) {
        return;
      }
      options._noupdate = true;
      this.get(options, function(err, resp) {
        var e, mc, nullkeys, thekey;

        if (err) {
          cb(err);
          return;
        }
        if (!resp.id) {
          cb(null, {});
          return;
        }
        nullkeys = [];
        for (e in options.d) {
          if (options.d[e] === null) {
            nullkeys.push(e);
          }
        }
        if (resp.d) {
          resp.d = _.extend(_.omit(resp.d, nullkeys), _.omit(options.d, nullkeys));
        } else {
          resp.d = _.omit(options.d, nullkeys);
        }
        thekey = "" + _this.redisns + options.app + ":" + options.token;
        mc = _this._createMultiStatement(options.app, options.token, resp.id, resp.ttl);
        mc.push(["hincrby", thekey, "w", 1]);
        if (resp.idle > 1) {
          mc.push(["hset", thekey, "la", _this._now()]);
        }
        if (_.keys(resp.d).length) {
          mc.push(["hset", thekey, "d", JSON.stringify(resp.d)]);
        } else {
          mc.push(["hdel", thekey, "d"]);
          resp = _.omit(resp, "d");
        }
        _this.redis.multi(mc).exec(function(err, reply) {
          cb(null, resp);
        });
      });
    };

    RedisSessions.prototype._createMultiStatement = function(app, token, id, ttl) {
      var now;

      now = this._now();
      return [["zadd", "" + this.redisns + app + ":_sessions", now, "" + token + ":" + id], ["zadd", "" + this.redisns + "SESSIONS", now + ttl, "" + app + ":" + token + ":" + id]];
    };

    RedisSessions.prototype._createToken = function() {
      var i, possible, t, _i;

      t = "";
      possible = "ABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxyz0123456789";
      for (i = _i = 0; _i < 55; i = ++_i) {
        t += possible.charAt(Math.floor(Math.random() * possible.length));
      }
      t += 'Z' + new Date().getTime().toString(36);
      return t;
    };

    RedisSessions.prototype._now = function() {
      return parseInt((new Date()).getTime() / 1000);
    };

    RedisSessions.prototype._prepareSession = function(session) {
      var now, o;

      now = this._now();
      if (session[0] === null) {
        return null;
      }
      o = {
        id: session[0],
        r: Number(session[1]),
        w: Number(session[2]),
        ttl: Number(session[3]),
        idle: now - session[5],
        ip: session[6]
      };
      if (o.ttl < o.idle) {
        return null;
      }
      if (session[4]) {
        o.d = JSON.parse(session[4]);
      }
      return o;
    };

    RedisSessions.prototype._VALID = {
      app: /^([a-zA-Z0-9_-]){3,20}$/,
      id: /^([a-zA-Z0-9_-]){1,64}$/,
      ip: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,
      token: /^([a-zA-Z0-9]){64}$/
    };

    RedisSessions.prototype._validate = function(o, items, cb) {
      var e, item, keys, _i, _len;

      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        switch (item) {
          case "app":
          case "id":
          case "ip":
          case "token":
            if (!o[item]) {
              cb("No " + item + " supplied");
              return false;
            }
            o[item] = o[item].toString();
            if (!this._VALID[item].test(o[item])) {
              cb("Invalid " + item + " format");
              return false;
            }
            break;
          case "ttl":
            o.ttl = parseInt(o.ttl || 7200, 10);
            if (_.isNaN(o.ttl) || !_.isNumber(o.ttl) || o.ttl < 10) {
              cb("ttl must be a positive integer >= 10");
              return false;
            }
            break;
          case "dt":
            o[item] = parseInt(o[item], 10);
            if (_.isNaN(o[item]) || !_.isNumber(o[item]) || o[item] < 10) {
              cb("dt must be a positive integer >= 10");
              return false;
            }
            break;
          case "d":
            if (!o[item]) {
              cb("No d supplied.");
              return false;
            }
            if (!_.isObject(o.d)) {
              cb("d must be an object.");
              return false;
            }
            keys = _.keys(o.d);
            if (!keys.length) {
              cb("d must containt at least one key.");
              return false;
            }
            for (e in o.d) {
              if (!_.isString(o.d[e]) && !_.isNumber(o.d[e]) && !_.isBoolean(o.d[e]) && !_.isNull(o.d[e])) {
                cb("d." + e + " has a forbidden type. Only strings, numbers, boolean and null are allowed.");
                return false;
              }
            }
        }
      }
      return o;
    };

    return RedisSessions;

  })();

  module.exports = RedisSessions;

}).call(this);
